#include "CStateMachine.h"
#include <iomanip>
#include <cstring>


Machine::Machine(RFM_IF *sharedArea, FSM_MARS_IF *marsArea) :
    m_rfm_iface(sharedArea),
    m_mars_iface(marsArea),
    m_off(this),
    m_warmup(this),
    m_standby(this),
    m_on(this),
    m_hold(this),
    m_total_fail(this),
    m_state(0),
    m_step(0),
    m_prevStateID(STATE::INVALID),
    m_ios(IOS_PAR_SET),
    m_quick_warmup(false),
    m_radar_power_on(false),
    m_wow(true),
    m_is_total_fail(false),
    m_is_radar_shutdown(false),
    m_is_override(false),
    m_is_coolant_failure(false),
	m_is_cooling_delay_ended(false)
{
    this->setCurrent(STATE::OFF);
}


void Machine::updateMalfunctions() {
	if (getCoolingDelayTime() >= COOLING_PUBLICATION_DELAY)
	{
		m_cooling_publication_delay.stop();
		m_is_cooling_delay_ended = true;
	}
	if ((m_ios == EVENT::IOS_PAUSE) or (m_ios == EVENT::IOS_OPERATE))
	{
		//coolant failure
		if (m_is_cooling_delay_ended)
		{
			m_mars_iface->coolant_failure = m_is_coolant_failure;
		}
	}
}


void Machine::step() {
    m_step++;
    updateMalfunctions();
    m_state->update();
    m_mars_iface->current_state = this->m_state->getID();
}


void Machine::scheduleEvent(EVENT e) {
    bool dump = false;
    if ( (e < 0) || (e > EVENT_NULL) )
    {
        if (dump) std::cout<<"Machine: Event "<<e<<" ignored"<<std::endl;
        //TODO: throw exception/signal/something
    }
    else
    {
        if (dump) std::cout<<"Machine: Event received "<< events[e] <<std::endl;
        m_state->handleEvent(e);
    }
}


void Machine::setCurrent(STATE s) {
    if (m_state)
    {
        m_state->onExit();
        m_prevStateID = this->m_state->getID();
    }
    switch (s)
    {
    case STATE::OFF:
        m_state=&m_off;
        break;
    case STATE::WARMUP:
        m_state=&m_warmup;
        break;
    case STATE::STANDBY:
        m_state=&m_standby;
        break;
    case STATE::ON:
        m_state=&m_on;
        break;
    case STATE::HOLD:
        m_state=&m_hold;
        break;
    case STATE::TOTAL_FAIL:
        m_state=&m_total_fail;
        break;
    case STATE::INVALID:
    default:
        //TODO: throw exception
        break;
    }
    m_state->onEntry();
}

void Machine::back() {
	if (m_prevStateID not_eq STATE::INVALID)
	{
		setCurrent(m_prevStateID);
	}
}

void Machine::printStatus() {
    if (m_step%2)
    	return;
	std::cout
    <<"       loop: " <<std::dec<<m_step<<"\n"
    <<"        ios: " <<events[m_ios]<<"\n"
    <<"        wow: " <<m_wow<<"\n"
    <<"      quick: " <<m_quick_warmup<<"\n"
    <<"    wup end: " <<m_mars_iface->warm_up_completed<<"\n";
    if (STATE::WARMUP == m_state->getID()) { std::cout
	<<"   wup left: " <<this->m_warmup.getWarmingDelay()<<"\n";
	}
	std::cout
	<<" cool delay: " <<getCoolingDelayTime()<<"\n"
	<<"    rad pow: " <<m_radar_power_on<<"\n"
    <<"   rad stat: " <<m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS<<"\n"
    <<"   sm state: " <<m_state->getName()<<"\n";
	

    std::cout
	<<"------  FAILURES  ------\n"
    <<"liq coolant: " <<m_is_coolant_failure<<"\n"
    <<" total fail: " <<m_is_total_fail<<"\n"
    <<" rad shdown: " <<m_is_radar_shutdown<<"\n"
    <<"shdn window: " <<m_state->getShutdownTime()<<"/"<<m_state->getShutdownDelay()<<"\n"
    <<"ovrd window: " <<m_state->getOverrideTime()<<"/"<<OVERRIDE_DELAY<<"\n"
    <<"shdn ovride: " <<m_is_override<<std::endl;
}


bool Machine::shouldBe(STATE s) const {
    if (m_state->getID() != s)
    {
        std::cout
                <<"*******************************************\n"
                <<"***** ERROR! "<<m_state->getName()<<" while expected "<<states[s]<<" *****\n"
                <<"*******************************************"<<std::endl;
        return false;
    }
    return true;
}


State::State(Machine* m, STATE nID) : m_stateID(nID), m_shutdown_delay(SHUTDOWN_DELAY_MIN), m_new_event(true), m_machine(m) {
    srandom(time(NULL));
}

void State::handleEvent(FSM::EVENT e) {
    m_new_event = true;
    switch (e)
    {
    case IOS_PAR_SET:
    case IOS_PAUSE:
    case IOS_OPERATE:
    case IOS_HOLD:
        m_machine->m_ios = e;
        break;
    case QUICK_WARMUP_TRUE:
        m_machine->m_quick_warmup = true;
        break;
    case QUICK_WARMUP_FALSE:
        m_machine->m_quick_warmup = false;
        break;
    case RADAR_POWER_ON:
        m_machine->m_radar_power_on = true;
        break;
    case RADAR_POWER_OFF:
        m_machine->m_radar_power_on = false;
        break;
    case WOW_TRUE:
        m_machine->m_wow = true;
        break;
    case WOW_FALSE:
        m_machine->m_wow = false;
        break;


    case RADAR_TOTAL_FAIL_TRUE:
        m_machine->m_is_total_fail = true;
        break;
    case RADAR_TOTAL_FAIL_FALSE:
        m_machine->m_is_total_fail = false;
        break;
    case RADAR_SHUTDOWN_TRUE:
        m_machine->m_is_radar_shutdown = true;
        break;
    case RADAR_SHUTDOWN_FALSE:
        m_machine->m_is_radar_shutdown = false;
        break;
    case LIQUID_COOLANT_FAILURE_TRUE:
        m_machine->m_is_coolant_failure = true;
        break;
    case LIQUID_COOLANT_FAILURE_FALSE:
        m_machine->m_is_coolant_failure = false;
        break;
    case SHUTDOWN_FAILURE_OVERRIDE_TRUE:
        m_machine->m_is_override = true;
        break;
    case SHUTDOWN_FAILURE_OVERRIDE_FALSE:
        m_machine->m_is_override = false;
        break;


    case EVENT_NULL:
        std::cout<<"EVENT_NULL ignored"<<std::endl;
        m_new_event = false;
        break;
    default:
        std::cout<<"********* EVENT IGNORED *********"<<std::endl;
        m_new_event = false;
        break;
    }
}

void State::updateFailureRadarShutdown() {
    if ( (not m_machine->m_is_radar_shutdown) )
    {
        m_override_timer.stop();
        m_shutdown_timer.stop();
    }
    else if (this->m_stateID not_eq STATE::TOTAL_FAIL)
    {
        if (not ( (m_machine->m_is_override) or (m_shutdown_timer.isStarted()) or (m_override_timer.isStarted()) ))
        {
            m_override_timer.start();
        }
        if ( (m_machine->m_is_override) and (not m_shutdown_timer.isStarted()) )
        {
            m_override_timer.stop();
            m_shutdown_timer.stop();
        }
        if (m_override_timer.getElapsedTimeInMilliSec() >= OVERRIDE_DELAY)
        {
            m_override_timer.stop();
            //pick a value between 3 and 10 seconds
            m_shutdown_delay  = (random() % 7000);
            m_shutdown_delay += SHUTDOWN_DELAY_MIN;

            m_shutdown_timer.start();
            m_machine->m_is_override = false;
        }
        if (m_shutdown_timer.getElapsedTimeInMilliSec() >= m_shutdown_delay)
        {
            m_override_timer.stop();
            m_shutdown_timer.stop();
            this->m_machine->setCurrent(STATE::TOTAL_FAIL);
        }
    }
}

void State::update() {
    //    if (m_new_event)
    //    {
    //        m_new_event = false;
    //    }

    //malfunction is considered only if in pause or operate condition
    if ((m_machine->m_ios == EVENT::IOS_PAUSE) or (m_machine->m_ios == EVENT::IOS_OPERATE))
    {
        //coolant failure - handled in CMarsSharedMemory
//        if (getCoolingDelayTime() >= COOLING_PUBLICATION_DELAY)
//        {
//        	m_cooling_publication_delay.stop();
//        	m_machine->m_mars_iface->coolant_failure = m_machine->m_is_coolant_failure;
//        }
    	m_machine->m_mars_iface->coolant_failure = m_machine->m_is_coolant_failure;
        // total fail - a State on its own
        if ((this->m_stateID not_eq STATE::TOTAL_FAIL) and (m_machine->m_is_total_fail))
        {
            m_machine->setCurrent(STATE::TOTAL_FAIL);
        }
        //radar shutdown is handled here
        updateFailureRadarShutdown();
    }
    m_machine->printStatus();
}

/*****************************************************************************/
/*********************************** OFF *************************************/
/*****************************************************************************/

OffState::OffState(Machine *m) : State(m, STATE::OFF), m_is_first_time(true) {
    std::cout << "   OFF-ctor\n";
}


OffState::~OffState() {
    std::cout << "   dtor-OFF\n";
}


void OffState::onEntry() {
    this->m_machine->m_mars_iface->warm_up_completed = false;
    m_machine->m_is_cooling_delay_ended = false;
}


void OffState::warmup() {
    std::cout << "   going from OFF to WARMUP\n";
    m_machine->setCurrent(STATE::WARMUP);
}


void OffState::hold() {
    std::cout << "   going from OFF to HOLD\n";
    m_machine->setCurrent(STATE::HOLD);
}


void OffState::onExit() {
    // The very first time we exit from off,
    // align mars memory to rfm
    if (m_is_first_time) {
        m_is_first_time = false;
    }

    this->m_machine->m_cooling_publication_delay.start();
    std::cout << "m_cooling_publication_delay started \n";
}


void OffState::update() {

    switch (this->m_machine->m_ios) {
    case IOS_OPERATE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 2;
        if (true == m_machine->m_radar_power_on) {
            this->warmup();
        }
        break;
    case IOS_PAUSE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 1;
        if (true == this->m_machine->m_radar_power_on) {
            this->warmup();
        }
        break;
    case IOS_PAR_SET:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = ((false == m_machine->m_mars_iface->db_ready_flag) ? 1 : 0);
        break;
    case IOS_HOLD:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 3;
        this->hold();
        break;
    default:
        std::cout<<"-------------------------------------------------> IOS INVALID "<<this->m_machine->m_ios<<std::endl;
        //TODO:throw exception
        break;
    }
    State::update();
}

/*****************************************************************************/
/********************************** WARMUP ***********************************/
/*****************************************************************************/

WarmupState::WarmupState(Machine *m) : State(m, STATE::WARMUP), m_warming_delay(WARMING_DELAY) {
    std::cout << "   WARMUP-ctor\n";
}


WarmupState::~WarmupState() {
    std::cout << "   dtor-WARMUP\n";
}


void WarmupState::onEntry() {
    std::cout<<"WarmupState::onEntry()\n";

    if (STATE::HOLD == this->m_machine->m_prevStateID) {
        //skip setup of warming delay if we return from hold state
        return;
    }

    if (m_machine->m_quick_warmup) {
        m_warming_delay = 1;
        std::cout<<"Quick WARM-UP\n";
    }
    else {
        m_warming_delay = WARMING_DELAY;
        std::cout<<"WARMING UP...\n";
    }
}


void WarmupState::off() {
    std::cout << "   going from WARMUP to OFF\n";
    m_machine->setCurrent(STATE::OFF);
}


void WarmupState::warmup() {
    m_warming_delay--;
//    std::cout<<"WARMUP: "<<std::setw(4)<<m_warming_delay<<" cycles to go"<<std::endl;
    if (0 == m_warming_delay) {
        std::cout<<"Warmup end"<<std::endl;
        this->standby();
    }
    else if (m_machine->m_quick_warmup) {
        std::cout<<"Quick warmup activated, warmup aborted\n"<<std::endl;
        this->standby();
    }
}


void WarmupState::update () {
    switch (this->m_machine->m_ios) {
    case IOS_OPERATE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 2;
        if (false == this->m_machine->m_radar_power_on) {
            this->off();
        }
        else
            warmup();
        break;
    case IOS_PAUSE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 1;
        if (false == this->m_machine->m_radar_power_on) {
            this->off();
        }
        else
            warmup();
        break;
    case IOS_PAR_SET:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = ((false == m_machine->m_mars_iface->db_ready_flag) ? 1 : 0);

        //5. if (RADAR_POWER_OFF) goto state off
        //   else decrement/check warmupCounter *only*
        //   and if the case goto state STANDBY
        if (false == this->m_machine->m_radar_power_on) {
            this->off();
        }
        else
            warmup();
        break;
    case IOS_HOLD:
        this->hold();
        break;
    default:
        //TODO:throw exception
        break;
    }
    State::update();
}


void WarmupState::standby() {
    std::cout << "   going from WARMUP to STANDBY\n";
    m_machine->setCurrent(STATE::STANDBY);
}


void WarmupState::hold() {
    std::cout << "   going from WARMUP to HOLD\n";
    m_machine->setCurrent(STATE::HOLD);
}


void WarmupState::onExit() {
    std::cout<<"WarmupState::onExit() - stateID:"<<states[this->getID()]<<std::endl;
    m_new_event = true;
}


/*****************************************************************************/
/*********************************  STANDBY **********************************/
/*****************************************************************************/

StandbyState::StandbyState(Machine *m) : State(m, STATE::STANDBY) {
    std::cout << "   STANDBY-ctor\n";
}


StandbyState::~StandbyState() {
    std::cout << "   dtor-STANDBY\n";
}


void StandbyState::onEntry() {
    this->m_machine->m_mars_iface->warm_up_completed = true;
}


void StandbyState::off() {
    std::cout << "   going from STANDBY to OFF\n";
    m_machine->setCurrent(STATE::OFF);
}


void StandbyState::on() {
    std::cout << "   going from STANDBY to ON\n";
    m_machine->setCurrent(STATE::ON);
}


void StandbyState::hold() {
    std::cout << "   going from STANDBY to HOLD\n";
    m_machine->setCurrent(STATE::HOLD);
}


void StandbyState::update() {
    switch (this->m_machine->m_ios) {
    case IOS_OPERATE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 2;
        if (false == this->m_machine->m_radar_power_on) {
            m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
            this->off();
        }
        else if (true == this->m_machine->m_wow) {
            m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
        }
        else {
            this->on();
        }
        break;

    case IOS_PAUSE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 1;
        if (false == this->m_machine->m_radar_power_on) {
            m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
            this->off();
        }
        else if (true == this->m_machine->m_wow) {
            m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
        }
        else {
            this->on();
        }
        break;

    case IOS_PAR_SET:
        m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = ((false == m_machine->m_mars_iface->db_ready_flag) ? 1 : 0);
        break;

    case IOS_HOLD:
        m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 3;
        this->hold();
        break;
    default:
        //TODO:throw exception
        break;
    }
    State::update();

}

/*****************************************************************************/
/************************************ ON *************************************/
/*****************************************************************************/

OnState::OnState(Machine *m) : State(m, STATE::ON)
{
    std::cout << "   ON-ctor\n";
}


OnState::~OnState()
{
    std::cout << "   dtor-ON\n";
}


void OnState::standby()
{
    std::cout << "   going from ON to STANDBY\n";
    m_machine->setCurrent(STATE::STANDBY);
}


void OnState::off()
{
    std::cout << "   going from ON to OFF\n";
    m_machine->setCurrent(STATE::OFF);
}


void OnState::hold()
{
    std::cout << "   going from ON to HOLD\n";
    m_machine->setCurrent(STATE::HOLD);
}


void OnState::update()
{
    switch (this->m_machine->m_ios)
    {
    case IOS_OPERATE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 2;
        if (false == this->m_machine->m_radar_power_on)
        {
            m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
            this->off();
        }
        else if (true == this->m_machine->m_wow)
        {
            this->m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
            this->standby();
        }
        else
        {
            m_machine->m_mars_iface->flight_freeze = false;
        }
        break;

    case IOS_PAUSE:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 1;
        if (false == this->m_machine->m_radar_power_on)
        {
            m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
            this->off();
        }
        else if (true == this->m_machine->m_wow)
        {
            m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;
            this->standby();
        }
        else
        {
            m_machine->m_mars_iface->flight_freeze = true;
        }
        break;

    case IOS_PAR_SET:
        m_machine->m_mars_iface->flight_freeze = true;
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = ((false == m_machine->m_mars_iface->db_ready_flag) ? 1 : 0);
        break;

    case IOS_HOLD:
        m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 3;
        m_machine->m_mars_iface->flight_freeze = true;
        this->hold();
        break;
    default:
        //TODO:throw exception
        break;
    }
    State::update();
}

/*****************************************************************************/
/*********************************** HOLD ************************************/
/*****************************************************************************/

HoldState::HoldState(Machine *m) : State(m, STATE::HOLD)
{
    std::cout << "   HOLD-ctor\n";
}


HoldState::~HoldState()
{
    std::cout << "   dtor-HOLD\n";
}


void HoldState::off()
{
    std::cout << "   going from HOLD to OFF\n";
    m_machine->setCurrent(STATE::OFF);
}


void HoldState::warmup()
{
    std::cout << "   going from HOLD to WARMUP\n";
    m_machine->setCurrent(STATE::WARMUP);
}


void HoldState::standby()
{
    std::cout << "   going from HOLD to STANDBY\n";
    m_machine->setCurrent(STATE::STANDBY);
}


void HoldState::on()
{
    std::cout << "   going from HOLD to ON\n";
    m_machine->setCurrent(STATE::ON);
}


void HoldState::back()
{
    std::cout << "   going from HOLD to "<<states[m_machine->m_prevStateID]<<std::endl;
    m_machine->back();
}


void HoldState::update()
{
    m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 3;
    switch (this->m_machine->m_ios)
    {
    case IOS_HOLD:
        m_machine->m_mars_iface->flight_freeze = true;
        break;
    case IOS_OPERATE:
    case IOS_PAUSE:
    case IOS_PAR_SET:
        this->back();
        break;
    default:
        //TODO:throw exception
        break;
    }
    State::update();
}

/*****************************************************************************/
/******************************** TOTAL FAIL *********************************/
/*****************************************************************************/

TotalFailState::TotalFailState(Machine *m) : State(m, STATE::TOTAL_FAIL) {
    std::cout << "   TOTFAIL-ctor\n";
}


TotalFailState::~TotalFailState() {
    std::cout << "   dtor-TOTFAIL\n";
}


void TotalFailState::update() {
    //If we are here, is_total_fail (or is_radar_shutdown) is true.
    //As soon as both are false again, go to state powerOff in order to consider again warmup transition.
    if ( (0 == m_machine->m_is_radar_shutdown) and (0 == m_machine->m_is_total_fail) )
    {
        m_machine->setCurrent(STATE::OFF);
    }
    else
    {
        m_machine->m_mars_iface->req_radar_operational_mode = OP_MODE_OFF;

        switch (this->m_machine->m_ios) {
        case IOS_OPERATE:
            m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 2;
            break;
        case IOS_PAUSE:
            m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 1;
            break;
        case IOS_PAR_SET:
            m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = ((false == m_machine->m_mars_iface->db_ready_flag) ? 1 : 0);
            break;
        case IOS_HOLD:
            m_machine->m_rfm_iface->radarOutput.rdr_to_wsfh.RDR_STATUS = 3;
            this->hold();
            break;
        default:
            //TODO:throw exception
            break;
        }
    }
    State::update();
}

void TotalFailState::onExit() {
}

void TotalFailState::hold() {
    std::cout << "   going from TOTFAIL to HOLD\n";
    m_machine->setCurrent(STATE::HOLD);
}
